#!/bin/sh

# This is the pre-commit hook that runs before each commit
# It ensures that code quality standards are met before allowing the commit to proceed

# Exit immediately if a command exits with a non-zero status
set -e

# Get the root directory of the git repository
ROOT_DIR="$(git rev-parse --show-toplevel)"

# Run gitleaks to check for secrets in the staged files
echo "Running gitleaks to check for secrets..."
if ! command -v gitleaks >/dev/null 2>&1; then
  echo "gitleaks is not installed. Please install it with 'brew install gitleaks' and try again."
  exit 1
fi

# Run gitleaks on the staged files only
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)
if [ -n "$STAGED_FILES" ]; then
  gitleaks git --pre-commit --staged
  if [ $? -ne 0 ]; then
    echo "Gitleaks detected secrets in the staged files. Commit aborted."
    exit 1
  fi
fi

# Check if the staged files include GitHub Actions workflow files
STAGED_WORKFLOW_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '^\.github/workflows/.*\.ya?ml$' || true)

# If GitHub Actions workflow files are staged, run zizmor
if [ -n "$STAGED_WORKFLOW_FILES" ]; then
  echo "Running zizmor to check GitHub Actions workflows..."
  
  # Check if zizmor is installed
  if ! command -v zizmor >/dev/null 2>&1; then
    echo "zizmor is not installed. Please install it and try again."
    exit 1
  fi
  
  # Run zizmor on each staged workflow file with pedantic persona and medium thresholds
  for file in $STAGED_WORKFLOW_FILES; do
    echo "Checking $file with zizmor (pedantic mode, medium+ severity/confidence)..."
    if ! zizmor --persona=pedantic --min-severity=medium --min-confidence=medium "$ROOT_DIR/$file"; then
      echo "Zizmor detected issues in $file. Commit aborted."
      exit 1
    fi
  done
  
  echo "All GitHub Actions workflows passed zizmor security checks!"
fi

# Check if the staged files include JavaScript files in the javascriptapp directory
STAGED_JS_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '^javascriptapp/.*\.js$' || true)

# If no JavaScript files in the javascriptapp directory are staged, exit early
if [ -z "$STAGED_JS_FILES" ]; then
  echo "No JavaScript files in javascriptapp directory were staged. Skipping pre-commit hooks."
  exit 0
fi

# Change directory to the javascriptapp directory
cd "$ROOT_DIR/javascriptapp"

# Extract just the filenames without the javascriptapp/ prefix
JS_FILES_WITHOUT_PREFIX=$(echo "$STAGED_JS_FILES" | sed 's|^javascriptapp/||')

echo "Running pre-commit hooks for JavaScript files..."
  
  # Run ESLint on staged JavaScript files
  echo "Running ESLint..."
  npx eslint --fix $JS_FILES_WITHOUT_PREFIX
  
  # Run Prettier on staged JavaScript files
  echo "Running Prettier..."
  npx prettier --write $JS_FILES_WITHOUT_PREFIX
  
  # Run Jest tests related to the changed files
  echo "Running Jest tests..."
  npx jest --findRelatedTests --passWithNoTests $JS_FILES_WITHOUT_PREFIX
  
  # Add the fixed files back to the staging area
  cd "$ROOT_DIR"
  for file in $STAGED_JS_FILES; do
    git add "$file"
  done
  
  echo "Pre-commit hooks completed successfully!"

# If all checks pass, the commit will proceed
# If any check fails, the commit will be aborted
